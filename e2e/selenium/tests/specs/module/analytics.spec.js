// Generated by Selenium IDE
const { By, until } = require("selenium-webdriver");
const assert = require("assert");

describe("analytics", function () {
  beforeEach(async function () {
    await driver.get(baseUrl + "/?frontity_name=analytics");
    await driver.wait(until.titleIs("Homepage Title"), 5000);
  });

  const pageviewHome = {
    link: "/",
    title: "Homepage Title",
  };

  const pageviewSomePost = {
    link: "/some-post/",
    title: "Some Post Title",
  };

  const pageviewSomeOtherPost = {
    link: "/some-other-post/",
    title: "Some Post Title",
  };

  const someEvent = {
    name: "some event",
    payload: { content: "some content" },
  };

  it("should send the first pageview", async function () {
    assert.deepEqual(
      await driver.executeScript(
        "return window.frontity.state.testAnalytics.pageviews[0]"
      ),
      pageviewHome
    );
  });

  it("should send a pageview if the page changes", async function () {
    await driver.findElement(By.id("change-link")).click();
    await driver.wait(until.titleIs("Some Post Title"), 5000);
    assert.deepEqual(
      await driver.executeScript(
        "return window.frontity.state.testAnalytics.pageviews[1]"
      ),
      pageviewSomePost
    );
  });

  it("should send a pageview if the page changes and title is the same", async function () {
    await driver.findElement(By.id("change-link")).click();
    await driver.wait(until.titleIs("Some Post Title"), 5000);
    await driver.findElement(By.id("change-link-post-2")).click();
    await driver.manage().setTimeouts({ implicit: 2000 });
    await driver.executeScript("return window.history.back()");
    await driver.manage().setTimeouts({ implicit: 2000 });
    assert.deepEqual(
      await driver.executeScript(
        "return window.frontity.state.testAnalytics.pageviews[1]"
      ),
      pageviewSomePost
    );
    assert.deepEqual(
      await driver.executeScript(
        "return window.frontity.state.testAnalytics.pageviews[2]"
      ),
      pageviewSomeOtherPost
    );
    assert.deepEqual(
      await driver.executeScript(
        "return window.frontity.state.testAnalytics.pageviews[3]"
      ),
      pageviewSomePost
    );
  });

  it("should send pageviews when going back or forward", async function () {
    await driver.findElement(By.id("change-link")).click();
    await driver.wait(until.titleIs("Some Post Title"), 5000);
    await driver.executeScript("return window.history.back()");
    await driver.wait(until.titleIs("Homepage Title"), 5000);
    assert.deepEqual(
      await driver.executeScript(
        "return window.frontity.state.testAnalytics.pageviews[2]"
      ),
      pageviewHome
    );

    await driver.executeScript("return window.history.forward()");
    await driver.wait(until.titleIs("Some Post Title"), 5000);
    assert.deepEqual(
      await driver.executeScript(
        "return window.frontity.state.testAnalytics.pageviews[3]"
      ),
      pageviewSomePost
    );
  });

  it("should send events", async function () {
    await driver.findElement(By.id("send-event")).click();
    await driver.findElement(By.id("send-event")).click();
    await driver.findElement(By.id("send-event")).click();
    await driver.manage().setTimeouts({ implicit: 2000 });
    assert.deepEqual(
      await driver.executeScript(
        "return window.frontity.state.testAnalytics.events[0]"
      ),
      someEvent
    );
    assert.deepEqual(
      await driver.executeScript(
        "return window.frontity.state.testAnalytics.events[1]"
      ),
      someEvent
    );
    assert.deepEqual(
      await driver.executeScript(
        "return window.frontity.state.testAnalytics.events[2]"
      ),
      someEvent
    );
  });
});
